require "spec_helper"

RSpec.describe Inquiry::Formatters::LinkTo do

  subject { described_class.new(:customer) }

  it_behaves_like "a report value formatter"

  describe "#call" do
    let(:link) { double("the link") }
    let(:view) { double("the view", link_to: link, formats: [:html]) }
    let(:brent) { Customer.create!(first_name: "Brent", last_name: "Shappiro") }
    let(:order) { Order.create!(customer: brent) }

    it "returns a link to the given relation" do
      expect(view).to receive(:link_to).with(brent).and_return(link)
      result = subject.call(view, order)
      expect(result).to eq link
    end

    it "returns a link to the record itself when no relation is given" do
      subject = described_class.new
      expect(view).to receive(:link_to).with(order).and_return(link)
      result = subject.call(view, order)
      expect(result).to eq link
    end

    it "returns a link using label methods and additional args given on initialization" do
      expect(view).to receive(:link_to)
        .with("My label", brent)
        .and_return link
      subject = described_class.new(:customer, label: "My label")
      expect(subject.call(view, order)).to eq link
    end

    it "returns a link generated by an override block when given on initialization" do
      allow(view).to receive(:custom_path)
        .with(brent)
        .and_return("/custom/path")
      expect(view).to receive(:link_to)
        .with("My link", "/custom/path", more: "here")
        .and_return link
      subject = described_class.new(:customer) do |view, customer|
        ["My link", view.custom_path(customer), { more: "here" }]
      end
      expect(subject.call(view, order)).to eq link
    end

    it "only renders the text when the view is a CSV download" do
      subject = described_class.new(:customer)
      allow(view).to receive(:formats).with(no_args).and_return [:csv]
      expect(subject.call(view, order)).to eq brent

      subject = described_class.new(:customer, label_method: :full_name)
      expect(subject.call(view, order)).to eq "Brent Shappiro"

      subject = described_class.new(:customer) do |view, customer|
        ["Custom link", "/custom/path"]
      end
      expect(subject.call(view, order)).to eq "Custom link"
    end
  end
end
